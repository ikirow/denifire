.editor-styles-wrapper {
  /*
    DENIFIRE variables
*/
  /**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */
  /**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */
  /**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */
  /**
 * Color palette.
 *
 * @see resources/styles/shared/_variables.scss
 */
  /**
 * Font sizes.
 *
 * @see resources/styles/shared/_variables.scss
 */ }

@font-face {
  .editor-styles-wrapper {
    font-family: "Roboto";
    font-display: auto;
    src: url("../fonts/Roboto/Roboto-Regular.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Regular.woff") format("woff"), url("../fonts/Roboto/Roboto-Regular.ttf") format("truetype");
    font-weight: 400; } }

@font-face {
  .editor-styles-wrapper {
    font-family: "Roboto";
    font-display: auto;
    src: url("../fonts/Roboto/Roboto-Light.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Light.woff") format("woff"), url("../fonts/Roboto/Roboto-Light.ttf") format("truetype");
    font-weight: 100; } }

@font-face {
  .editor-styles-wrapper {
    font-family: "Roboto";
    font-display: auto;
    src: url("../fonts/Roboto/Roboto-Bold.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Bold.woff") format("woff"), url("../fonts/Roboto/Roboto-Bold.ttf") format("truetype");
    font-weight: 600; } }

@font-face {
  .editor-styles-wrapper {
    font-family: "Robotocondensed";
    font-display: auto;
    src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Regular") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
    font-weight: 400; } }

@font-face {
  .editor-styles-wrapper {
    font-family: "Robotocondensed";
    font-display: auto;
    src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Light") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
    font-weight: 100; } }

@font-face {
  .editor-styles-wrapper {
    font-family: "Robotocondensed";
    font-display: auto;
    src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Bold") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
    font-weight: 600; } }
  .editor-styles-wrapper html {
    -webkit-box-sizing: border-box;
            box-sizing: border-box; }
  .editor-styles-wrapper *,
  .editor-styles-wrapper *:before,
  .editor-styles-wrapper *:after {
    /* Inherit box-sizing to make it easier to change the property for components that leverage other behavior; see https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
    -webkit-box-sizing: inherit;
            box-sizing: inherit; }
  .editor-styles-wrapper ul, .editor-styles-wrapper ol {
    margin: 0; }
  .editor-styles-wrapper ul {
    list-style: none outside none; }
  .editor-styles-wrapper ol {
    list-style: decimal; }
  .editor-styles-wrapper li > ul,
  .editor-styles-wrapper li > ol {
    margin-bottom: 0;
    margin-left: 1.5em; }
  .editor-styles-wrapper dt {
    font-weight: bold; }
  .editor-styles-wrapper dd {
    margin: 0 1.5em 1.5em; }
  .editor-styles-wrapper table {
    margin: 0 0 1.5em;
    width: 100%; }
  .editor-styles-wrapper .table-wrapper {
    overflow-x: auto;
    margin: 0 0 20px;
    overflow-y: hidden; }
  .editor-styles-wrapper ul, .editor-styles-wrapper ol {
    margin: 0; }
  .editor-styles-wrapper ul {
    list-style: none outside none; }
  .editor-styles-wrapper ol {
    list-style: decimal; }
  .editor-styles-wrapper li > ul,
  .editor-styles-wrapper li > ol {
    margin-bottom: 0;
    margin-left: 1.5em; }
  .editor-styles-wrapper dt {
    font-weight: bold; }
  .editor-styles-wrapper dd {
    margin: 0 1.5em 1.5em; }
  .editor-styles-wrapper table {
    margin: 0 0 1.5em;
    width: 100%; }
  .editor-styles-wrapper .table-wrapper {
    overflow-x: auto;
    margin: 0 0 20px;
    overflow-y: hidden; }
  .editor-styles-wrapper .has-grey-text-color {
    color: #646464; }
  .editor-styles-wrapper .has-grey-text-background-color {
    background-color: #646464; }
  .editor-styles-wrapper .has-dark-grey-color {
    color: #333333; }
  .editor-styles-wrapper .has-dark-grey-background-color {
    background-color: #333333; }
  .editor-styles-wrapper .has-xs-font-size {
    font-size: 12px; }
  .editor-styles-wrapper .has-s-font-size {
    font-size: 16px; }
  .editor-styles-wrapper .has-m-font-size {
    font-size: 18px; }
  .editor-styles-wrapper .has-l-font-size {
    font-size: 28px; }
  .editor-styles-wrapper .has-xl-font-size {
    font-size: 36px; }
  .editor-styles-wrapper body .editor-styles-wrapper {
    /*
  color: $color__text-main;
  font-family: $font-famili-paragraph;
  */
    /*
  h1,h2,h3,h4,h5,h6 {
    font-family: Roboto, sans-serif;
    font-weight: bold;
    line-height: 1.4;
    color: $darkgrey;
    margin: 0;
  }
  h1{
    font-size: 28px;
  }

  h2{
    font-size: 20px;
  }

  h3{
    font-size: 18px;
  }

  h4{
    font-size: 16px;
  }

  h5,h6{
    font-size: 16px;
  }

  a{
    color: $blue;
    text-decoration: none;
  }

  p{
    font-size: em(14);
    margin: 0;
    @include bp(tablet){
      font-size: 1em;
    }
  }
  */ }
    .editor-styles-wrapper body .editor-styles-wrapper .wp-block[data-align=full] {
      max-width: none; }
  .editor-styles-wrapper .wp-block-cover.alignfull {
    padding: 0; }
    .editor-styles-wrapper .wp-block-cover.alignfull .wp-block-cover__inner-container {
      width: 100%; }
  .editor-styles-wrapper .is-style-red-button a {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none; }
  .editor-styles-wrapper .is-style-red-button .wp-block-button__link {
    background-color: #E50A19;
    padding: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
