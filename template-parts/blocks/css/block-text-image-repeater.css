/*
    DENIFIRE variables
*/
@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Regular.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Regular.woff") format("woff"), url("../fonts/Roboto/Roboto-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Light.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Light.woff") format("woff"), url("../fonts/Roboto/Roboto-Light.ttf") format("truetype");
  font-weight: 100; }

@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Bold.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Bold.woff") format("woff"), url("../fonts/Roboto/Roboto-Bold.ttf") format("truetype");
  font-weight: 600; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Regular") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Light") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 100; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Bold") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 600; }

/**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */
/**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */
/**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */
.image-text-repeater {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-gap: 46px 49px; }
  @media screen and (max-width: 979px) {
    .image-text-repeater {
      grid-template-columns: repeat(4, 1fr); } }
  @media (max-width: 767px) {
    .image-text-repeater {
      grid-template-columns: repeat(2, 1fr); } }
  @media (max-width: 399px) {
    .image-text-repeater {
      grid-template-columns: repeat(1, 1fr); } }
  .image-text-repeater div {
    text-align: center; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
