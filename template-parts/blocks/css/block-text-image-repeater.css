/*
    DENIFIRE variables
*/
/* roboto-condensed-regular - latin_cyrillic */
@font-face {
  font-family: 'Roboto Condensed';
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-regular.eot");
  /* IE9 Compat Modes */
  src: local(""), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-regular.woff2") format("woff2"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-regular.woff") format("woff"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-regular.ttf") format("truetype"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-regular.svg#RobotoCondensed") format("svg");
  /* Legacy iOS */ }

/* roboto-condensed-700 - latin_cyrillic */
@font-face {
  font-family: 'Roboto Condensed';
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-700.eot");
  /* IE9 Compat Modes */
  src: local(""), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-700.eot?#iefix") format("embedded-opentype"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-700.woff2") format("woff2"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-700.woff") format("woff"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-700.ttf") format("truetype"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-700.svg#RobotoCondensed") format("svg");
  /* Legacy iOS */ }

/* roboto-condensed-300 - latin_cyrillic */
@font-face {
  font-family: 'Roboto Condensed';
  font-style: normal;
  font-weight: 300;
  src: url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-300.eot");
  /* IE9 Compat Modes */
  src: local(""), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-300.eot?#iefix") format("embedded-opentype"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-300.woff2") format("woff2"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-300.woff") format("woff"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-300.ttf") format("truetype"), url("../fonts/Robotocondensed/roboto-condensed-v19-latin_cyrillic-300.svg#RobotoCondensed") format("svg");
  /* Legacy iOS */ }

@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 100;
  src: url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-100.eot");
  /* IE9 Compat Modes */
  src: local(""), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-100.eot?#iefix") format("embedded-opentype"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-100.woff2") format("woff2"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-100.woff") format("woff"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-100.ttf") format("truetype"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-100.svg#Roboto") format("svg");
  /* Legacy iOS */ }

/* roboto-regular - latin_cyrillic-ext */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-regular.eot");
  /* IE9 Compat Modes */
  src: local(""), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-regular.woff2") format("woff2"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-regular.woff") format("woff"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-regular.ttf") format("truetype"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-regular.svg#Roboto") format("svg");
  /* Legacy iOS */ }

/* roboto-700 - latin_cyrillic-ext */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-700.eot");
  /* IE9 Compat Modes */
  src: local(""), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-700.eot?#iefix") format("embedded-opentype"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-700.woff2") format("woff2"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-700.woff") format("woff"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-700.ttf") format("truetype"), url("../fonts/Roboto/roboto-v20-latin_cyrillic-ext-700.svg#Roboto") format("svg");
  /* Legacy iOS */ }

/**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */
/**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */
/**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */
.image-text-repeater {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-gap: 46px 49px; }
  @media screen and (max-width: 979px) {
    .image-text-repeater {
      grid-template-columns: repeat(4, 1fr); } }
  @media (max-width: 767px) {
    .image-text-repeater {
      grid-template-columns: repeat(2, 1fr); } }
  @media (max-width: 415px) {
    .image-text-repeater {
      grid-template-columns: repeat(1, 1fr); } }
  .image-text-repeater div {
    text-align: center; }
  @media (max-width: 415px) {
    .image-text-repeater img {
      max-width: 80%;
      margin: 0 auto; } }
  @media (max-width: 415px) {
    .image-text-repeater label {
      width: 100%;
      display: block; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
