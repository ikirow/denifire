/*
    DENIFIRE variables
*/
@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Regular.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Regular.woff") format("woff"), url("../fonts/Roboto/Roboto-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Light.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Light.woff") format("woff"), url("../fonts/Roboto/Roboto-Light.ttf") format("truetype");
  font-weight: 100; }

@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Bold.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Bold.woff") format("woff"), url("../fonts/Roboto/Roboto-Bold.ttf") format("truetype");
  font-weight: 600; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Regular") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Light") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 100; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Bold") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 600; }

/**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */
/**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */
/**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */
.block-example {
  background: #0EC997; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Fzc2V0cy9zYXNzL3ZhcmlhYmxlcy9fY29sb3JzLnNjc3MiLCJibG9jay1leGFtcGxlLmNzcyIsIi4uLy4uLy4uL2Fzc2V0cy9zYXNzL3ZhcmlhYmxlcy9fdHlwb2dyYXBoeS5zY3NzIiwiYmxvY2stZXhhbXBsZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DQTs7Q0NsQ0M7QUM4Q0Q7RUFDQyxxQkFSc0I7RUFTdEIsa0JBQWtCO0VBMUNqQixnTkFFcUU7RUEwQ3RFLGdCQVJnQixFQUFBOztBQVVqQjtFQUNDLHFCQWRzQjtFQWV0QixrQkFBa0I7RUFoRGpCLDBNQUVxRTtFQWdEdEUsZ0JBYlUsRUFBQTs7QUFlWDtFQUNDLHFCQXBCc0I7RUFxQnRCLGtCQUFrQjtFQXREakIsdU1BRXFFO0VBc0R0RSxnQkFsQmEsRUFBQTs7QUEwQmQ7RUFDQyw4QkFMd0M7RUFNeEMsa0JBQWtCO0VBbEVqQiwwUUFFcUU7RUFrRXRFLGdCQWhDZ0IsRUFBQTs7QUFrQ2pCO0VBQ0MsOEJBWHdDO0VBWXhDLGtCQUFrQjtFQXhFakIsd1FBRXFFO0VBd0V0RSxnQkFyQ1UsRUFBQTs7QUF1Q1g7RUFDQyw4QkFqQndDO0VBa0J4QyxrQkFBa0I7RUE5RWpCLHVRQUVxRTtFQThFdEUsZ0JBMUNhLEVBQUE7O0FBc0VkOzs7O0VEekVFO0FDbUZGOzs7RUQvRUU7QUM0RkY7Ozs7Ozs7OztFRGxGRTtBRXRERjtFQUNFLG1CSHlCYSxFQUFBIiwiZmlsZSI6ImJsb2NrLWV4YW1wbGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiJGNvbG9yX19iYWNrZ3JvdW5kLWJvZHk6ICNmZmY7XG4kY29sb3JfX2JhY2tncm91bmQtc2NyZWVuOiAjZjFmMWYxO1xuJGNvbG9yX19iYWNrZ3JvdW5kLWhyOiAjY2NjO1xuJGNvbG9yX19iYWNrZ3JvdW5kLWJ1dHRvbjogI2U2ZTZlNjtcbiRjb2xvcl9fYmFja2dyb3VuZC1wcmU6ICNlZWU7XG4kY29sb3JfX2JhY2tncm91bmQtaW5zOiAjZmZmOWMwO1xuXG5cbiRjb2xvcl9fdGV4dC1tYWluOiAjNDA0MDQwO1xuXG4kY29sb3JfX3RleHQtc2NyZWVuOiAjMjE3NTliO1xuJGNvbG9yX190ZXh0LWlucHV0OiAjNjY2O1xuJGNvbG9yX190ZXh0LWlucHV0LWZvY3VzOiAjMTExO1xuXG4kY29sb3JfX2xpbms6ICMwMDA7XG4kY29sb3JfX2xpbmstdmlzaXRlZDogbGlnaHRlbigkY29sb3JfX2xpbmssMTAlKTtcbiRjb2xvcl9fbGluay1ob3ZlcjogIzI0OTRCQztcblxuXG4kY29sb3JfX2JvcmRlci1idXR0b246ICNjY2MgI2NjYyAjYmJiO1xuJGNvbG9yX19ib3JkZXItYnV0dG9uLWhvdmVyOiAjY2NjICNiYmIgI2FhYTtcbiRjb2xvcl9fYm9yZGVyLWJ1dHRvbi1mb2N1czogI2FhYSAjYmJiICNiYmI7XG4kY29sb3JfX2JvcmRlci1pbnB1dDogI2NjYztcbiRjb2xvcl9fYm9yZGVyLWFiYnI6ICM2NjY7XG5cbiRibHVlOiAjMkVCQUVDO1xuJGJsdWVfb3BhYzogcmdiYSg0NiwxODYsMjM2LC4xNyk7XG4kYmx1ZV9tZW51OiByZ2JhKDQ2LDE4NiwyMzYsLjUwKTtcblxuJGdyZWVuOiAjMEVDOTk3O1xuJGRhcmtibHVlOiAjMTQyMzJGO1xuJGJvcmRlcl9jb2xvcjogI0VBRUFFQTtcbiRsaWdodGdyYXk6ICNGN0Y3Rjc7XG5cbiRibHVlX2FpcjogIzY1OERBRDtcblxuLypcbiAgICBERU5JRklSRSB2YXJpYWJsZXNcbiovIFxuJGhlYWRlci1iZzogcmdiYSgwLDAsMCwwLjQxKTtcbiRtb2JpbGUtbWVudS1iZzogcmdiYSgwLDAsMCwwLjkxKTtcbiRjb2xvci13aGl0ZTogI2ZmZjtcbiRjb2xvci1yZWQ6ICNFNTBBMTk7XG4kY29sb3ItZ3JheTogIzk5OTk5OTsiLCIvKlxuICAgIERFTklGSVJFIHZhcmlhYmxlc1xuKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2JvdG9cIjtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL1JvYm90by9Sb2JvdG8tUmVndWxhci5lb3Q/I2llZml4JnY9MS4wXCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250cy9Sb2JvdG8vUm9ib3RvLVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250cy9Sb2JvdG8vUm9ib3RvLVJlZ3VsYXIudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xuICBmb250LXdlaWdodDogNDAwOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2JvdG9cIjtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL1JvYm90by9Sb2JvdG8tTGlnaHQuZW90PyNpZWZpeCZ2PTEuMFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udHMvUm9ib3RvL1JvYm90by1MaWdodC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcIi4uL2ZvbnRzL1JvYm90by9Sb2JvdG8tTGlnaHQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xuICBmb250LXdlaWdodDogMTAwOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2JvdG9cIjtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL1JvYm90by9Sb2JvdG8tQm9sZC5lb3Q/I2llZml4JnY9MS4wXCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250cy9Sb2JvdG8vUm9ib3RvLUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250cy9Sb2JvdG8vUm9ib3RvLUJvbGQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xuICBmb250LXdlaWdodDogNjAwOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2JvdG9jb25kZW5zZWRcIjtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL1JvYm90b2NvbmRlbnNlZC9Sb2JvdG9jb25kZW5zZWQtUmVndWxhci5lb3Q/I2llZml4JnY9UmVndWxhclwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udHMvUm9ib3RvY29uZGVuc2VkL1JvYm90b2NvbmRlbnNlZC1SZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiLi4vZm9udHMvUm9ib3RvY29uZGVuc2VkL1JvYm90b2NvbmRlbnNlZC1SZWd1bGFyLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKTtcbiAgZm9udC13ZWlnaHQ6IDQwMDsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiUm9ib3RvY29uZGVuc2VkXCI7XG4gIGZvbnQtZGlzcGxheTogYXV0bztcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9Sb2JvdG9jb25kZW5zZWQvUm9ib3RvY29uZGVuc2VkLVJlZ3VsYXIuZW90PyNpZWZpeCZ2PUxpZ2h0XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250cy9Sb2JvdG9jb25kZW5zZWQvUm9ib3RvY29uZGVuc2VkLVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250cy9Sb2JvdG9jb25kZW5zZWQvUm9ib3RvY29uZGVuc2VkLVJlZ3VsYXIudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xuICBmb250LXdlaWdodDogMTAwOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2JvdG9jb25kZW5zZWRcIjtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL1JvYm90b2NvbmRlbnNlZC9Sb2JvdG9jb25kZW5zZWQtUmVndWxhci5lb3Q/I2llZml4JnY9Qm9sZFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udHMvUm9ib3RvY29uZGVuc2VkL1JvYm90b2NvbmRlbnNlZC1SZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiLi4vZm9udHMvUm9ib3RvY29uZGVuc2VkL1JvYm90b2NvbmRlbnNlZC1SZWd1bGFyLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuXG4vKipcbiAqIFN0cmlwcyB0aGUgdW5pdCBmcm9tIGEgZ2l2ZW4gbnVtYmVyLXVuaXQtY29tYmluYXRpb24gYW5kIHJldHVybnMgdGhlIG51bWJlci5cbiAqIEBsaW5rOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMjMzNTg0MS8xNzc5OTk5XG4gKiBAdXNhZ2U6IHBhcnNlLWludCgxMHB4KSA9PiAxMFxuICovXG4vKipcbiAqIFNpbXBseSBhZGRzIHRoZSBlbSB1bml0IHRvIGEgZ2l2ZW4gbnVtYmVyLiBUaGlzIGlzIHVzZWQgdHdpY2UgaW4gdGhlXG4gKiBmdW5jdGlvbiB1bmRlcm5lYXRoLCB0aHVzIHRoZSBuZWVkIGZvciBhIHNlcGFyYXRlIGZ1bmN0aW9uLlxuICovXG4vKipcbiAqIENhbGN1bGF0ZXMgZW0gdmFsdWVzIGZvciBhIGdpdmVuIGxpc3Qgb2YgKHB4IG9yIGVtKSB2YWx1ZXMgYW5kIGEgZ2l2ZW4gZW1cbiAqIGJhc2UuIE11bHRpcGx5IGJhc2UgdmFsdWVzIGZvciBuZXN0ZWQgZW0gc3RydWN0dXJlcyAobGFzdCBAdXNhZ2UgZXhhbXBsZSkuXG4gKiBAdXNhZ2U6IGVtKDEwcHgsIDEuMTI1KSA9PiAuNTU1NTZlbVxuICogICAgICAgICBlbSgyNHB4LCAuODc1ZW0pID0+IDEuNzE0MjllbVxuICogICAgICAgICBlbSgxMnB4IDAgN2VtIHJnYmEoMCwgMCwgMCwgLjcpLCAxLjc1KSA9PiAuNDI4NTdlbSAwIDRlbSByZ2JhKDAsIDAsIDAsIDAuNylcbiAqICAgICAgICAgZW0oMTJweCkgKyBlbSgzZW0pID0+IDMuNzVlbVxuICogICAgICAgICBlbSgyM3B4LCBlbSg1M3B4KSkgPT4gLjQzMzk2ZW1cbiAqICAgICAgICAgZW0oMjRweCwgMS41ICogMS4xMjUpID0+IC44ODg4OWVtXG4gKi9cbi5ibG9jay1leGFtcGxlIHtcbiAgYmFja2dyb3VuZDogIzBFQzk5NzsgfVxuIiwiLy8gIEZvbnRzIGFuZCBpY29uc1xuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIE1peGluIGZvciBhZGRpbmcgY3VzdG9tIGZvbnRzIGluIHRoZSBkaXIgL2ZvbnRzL2ZvbnRmb2xkZXJuYW1lL2ZvbnQtcmVndWxhclxuLy8gZXhhbXBsZSAvZm9udHMvYXZlcnRhL2F2ZXJ0YS1ib2xkLndvZmZcbi8vIGV4YW1wbGUgL2ZvbnRzL2F2ZXJ0YS9hdmVydGEtcmVndWxhci53b2ZmXG5cbkBtaXhpbiBmb250ZGVmKCRwYXRoLCAkZmlsZW5hbWUsICR2ZXJzaW9uLCAkdHlwZTpcIlJlZ3VsYXJcIikge1xuICBzcmM6IHVybChcIi4uL2ZvbnRzLyN7JHBhdGh9LyN7JGZpbGVuYW1lfS0jeyR0eXBlfS5lb3Q/I2llZml4JnY9I3skdmVyc2lvbn1cIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXG4gIHVybChcIi4uL2ZvbnRzLyN7JHBhdGh9LyN7JGZpbGVuYW1lfS0jeyR0eXBlfS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksXG4gIHVybChcIi4uL2ZvbnRzLyN7JHBhdGh9LyN7JGZpbGVuYW1lfS0jeyR0eXBlfS50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIik7XG59XG5cbi8vIEJlbG93IGFyZSBleGFtcGxlc1xuLy8gJEF2ZXJ0YUZhbWlseTogJ0F2ZXJ0YSc7XG4vLyAkQXZlcnRhVmVyc2lvbjogJzEuMCc7XG4vLyAkQXZlcnRhUGF0aDogXCJBdmVydGFcIjtcbi8vICRyZWd1bGFyZm9udDogNDAwO1xuLy8gJHNlbWlib2xkZm9udDogNTAwO1xuLy8gJGJvbGRmb250OiA2MDA7XG4vL1xuLy9AZm9udC1mYWNlIHtcbi8vICBmb250LWZhbWlseTogJEF2ZXJ0YUZhbWlseTtcbi8vICBmb250LWRpc3BsYXk6IGF1dG87XG4vLyAgQGluY2x1ZGUgZm9udGRlZigkQXZlcnRhUGF0aCwgJEF2ZXJ0YUZhbWlseSwgJEF2ZXJ0YVZlcnNpb24sIFwiUmVndWxhclwiKTtcbi8vICBmb250LXdlaWdodDogJHJlZ3VsYXJmb250O1xuLy99XG4vL0Bmb250LWZhY2Uge1xuLy8gIGZvbnQtZmFtaWx5OiAkQXZlcnRhRmFtaWx5O1xuLy8gIGZvbnQtZGlzcGxheTogYXV0bztcbi8vICBAaW5jbHVkZSBmb250ZGVmKCRBdmVydGFQYXRoLCAkQXZlcnRhRmFtaWx5LCAkQXZlcnRhVmVyc2lvbiwgXCJTZW1pYm9sZFwiKTtcbi8vICBmb250LXdlaWdodDogJHNlbWlib2xkZm9udDtcbi8vfVxuLy9AZm9udC1mYWNlIHtcbi8vICBmb250LWZhbWlseTogJEF2ZXJ0YUZhbWlseTtcbi8vICBmb250LWRpc3BsYXk6IGF1dG87XG4vLyAgQGluY2x1ZGUgZm9udGRlZigkQXZlcnRhUGF0aCwgJEF2ZXJ0YUZhbWlseSwgJEF2ZXJ0YVZlcnNpb24sIFwiQm9sZFwiKTtcbi8vICBmb250LXdlaWdodDogJGJvbGRmb250O1xuLy99XG5cblxuJFJvYm90b0ZhbWlseTogJ1JvYm90byc7XG4kUm9ib3RvVmVyc2lvbjogJzEuMCc7XG4kUm9ib3RvUGF0aDogXCJSb2JvdG9cIjtcbiRyZWd1bGFyZm9udDogNDAwO1xuJGxpZ2h0OiAxMDA7XG4kYm9sZGZvbnQ6IDYwMDtcblxuQGZvbnQtZmFjZSB7XG4gZm9udC1mYW1pbHk6ICRSb2JvdG9GYW1pbHk7XG4gZm9udC1kaXNwbGF5OiBhdXRvO1xuIEBpbmNsdWRlIGZvbnRkZWYoJFJvYm90b1BhdGgsICRSb2JvdG9GYW1pbHksICRSb2JvdG9WZXJzaW9uLCBcIlJlZ3VsYXJcIik7XG4gZm9udC13ZWlnaHQ6ICRyZWd1bGFyZm9udDtcbn1cbkBmb250LWZhY2Uge1xuIGZvbnQtZmFtaWx5OiAkUm9ib3RvRmFtaWx5O1xuIGZvbnQtZGlzcGxheTogYXV0bztcbiBAaW5jbHVkZSBmb250ZGVmKCRSb2JvdG9QYXRoLCAkUm9ib3RvRmFtaWx5LCAkUm9ib3RvVmVyc2lvbiwgXCJMaWdodFwiKTtcbiBmb250LXdlaWdodDogJGxpZ2h0O1xufVxuQGZvbnQtZmFjZSB7XG4gZm9udC1mYW1pbHk6ICRSb2JvdG9GYW1pbHk7XG4gZm9udC1kaXNwbGF5OiBhdXRvO1xuIEBpbmNsdWRlIGZvbnRkZWYoJFJvYm90b1BhdGgsICRSb2JvdG9GYW1pbHksICRSb2JvdG9WZXJzaW9uLCBcIkJvbGRcIik7XG4gZm9udC13ZWlnaHQ6ICRib2xkZm9udDtcbn1cblxuXG4kUm9ib3RvQ29uZGVuc2VkRmFtaWx5OiAnUm9ib3RvY29uZGVuc2VkJztcbiRSb2JvdG9Db25kZW5zZWRWZXJzaW9uOiAnMS4wJztcbiRSb2JvdG9Db25kZW5zZWRQYXRoOiBcIlJvYm90b2NvbmRlbnNlZFwiO1xuXG5AZm9udC1mYWNlIHtcbiBmb250LWZhbWlseTogJFJvYm90b0NvbmRlbnNlZEZhbWlseTtcbiBmb250LWRpc3BsYXk6IGF1dG87XG4gQGluY2x1ZGUgZm9udGRlZigkUm9ib3RvQ29uZGVuc2VkUGF0aCwgJFJvYm90b0NvbmRlbnNlZEZhbWlseSwgIFwiUmVndWxhclwiKTtcbiBmb250LXdlaWdodDogJHJlZ3VsYXJmb250O1xufVxuQGZvbnQtZmFjZSB7XG4gZm9udC1mYW1pbHk6ICRSb2JvdG9Db25kZW5zZWRGYW1pbHk7XG4gZm9udC1kaXNwbGF5OiBhdXRvO1xuIEBpbmNsdWRlIGZvbnRkZWYoJFJvYm90b0NvbmRlbnNlZFBhdGgsICRSb2JvdG9Db25kZW5zZWRGYW1pbHksICBcIkxpZ2h0XCIpO1xuIGZvbnQtd2VpZ2h0OiAkbGlnaHQ7XG59XG5AZm9udC1mYWNlIHtcbiBmb250LWZhbWlseTogJFJvYm90b0NvbmRlbnNlZEZhbWlseTtcbiBmb250LWRpc3BsYXk6IGF1dG87XG4gQGluY2x1ZGUgZm9udGRlZigkUm9ib3RvQ29uZGVuc2VkUGF0aCwgJFJvYm90b0NvbmRlbnNlZEZhbWlseSwgIFwiQm9sZFwiKTtcbiBmb250LXdlaWdodDogJGJvbGRmb250O1xufVxuXG4kZm9udC1mYW1pbHktc2Fucy1zZXJpZjogJ1JvYm90b2NvbmRlbnNlZCcgLEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4kZm9udC1mYW1pbHktc2VyaWY6IEdlb3JnaWEsICdUaW1lcyBOZXcgUm9tYW4nLCBzZXJpZjtcbiRmb250LWZhbWlsaS1wYXJhZ3JhcGg6ICdSb2JvdG8nLCBIZWx2ZXRpY2E7XG5cblxuXG4kZm9udF9fbWFpbjogJGZvbnQtZmFtaWx5LXNhbnMtc2VyaWY7XG4kZm9udF9fY29kZTogQXJpYWwsIFwiSGVsdmV0aWNhIE5ldWVcIiwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuJGZvbnRfX3ByZTogXCJDb3VyaWVyIDEwIFBpdGNoXCIsIENvdXJpZXIsIG1vbm9zcGFjZTtcbiRmb250X19saW5lLWhlaWdodC1ib2R5OiAxLjU7XG4kZm9udF9fbGluZS1oZWlnaHQtcHJlOiAxLjY7XG5cbiRiYXNlX2ZvbnRfc2l6ZTogMTZweDtcbiRmb250X2ZhbWlseTogJGZvbnQtZmFtaWx5LXNhbnMtc2VyaWY7XG4kZm9udF9mYW1pbHlfbWVudTogJGZvbnQtZmFtaWx5LXNhbnMtc2VyaWY7XG4kZm9udF9mYW1pbHlfaGVhZGluZ3M6ICRmb250LWZhbWlsaS1wYXJhZ3JhcGg7XG5cblxuJGVhc2luZzogZWFzZS1vdXQ7XG5cblxuLy8gUFggdG8gRU0vUkVNIC0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaXNlbGxzb2FwLzgyOTk3MjZcblxuJGJhc2UtZm9udC1zaXplOiAkYmFzZV9mb250X3NpemU7XG5cbi8qKlxuICogU3RyaXBzIHRoZSB1bml0IGZyb20gYSBnaXZlbiBudW1iZXItdW5pdC1jb21iaW5hdGlvbiBhbmQgcmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGxpbms6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEyMzM1ODQxLzE3Nzk5OTlcbiAqIEB1c2FnZTogcGFyc2UtaW50KDEwcHgpID0+IDEwXG4gKi9cblxuQGZ1bmN0aW9uIHBhcnNlLWludCgkbnVtYmVyKSB7XG4gIEByZXR1cm4gJG51bWJlciAvICgkbnVtYmVyICogMCArIDEpO1xufVxuXG4vKipcbiAqIFNpbXBseSBhZGRzIHRoZSBlbSB1bml0IHRvIGEgZ2l2ZW4gbnVtYmVyLiBUaGlzIGlzIHVzZWQgdHdpY2UgaW4gdGhlXG4gKiBmdW5jdGlvbiB1bmRlcm5lYXRoLCB0aHVzIHRoZSBuZWVkIGZvciBhIHNlcGFyYXRlIGZ1bmN0aW9uLlxuICovXG5cbkBmdW5jdGlvbiBhZGQtZW0tdW5pdCgkbnVtYmVyKSB7XG4gIEByZXR1cm4gJG51bWJlciAqIDFlbTtcbn1cblxuQGZ1bmN0aW9uIGFkZC1yZW0tdW5pdCgkbnVtYmVyKSB7XG4gIEByZXR1cm4gJG51bWJlciAqIDFyZW07XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBlbSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gbGlzdCBvZiAocHggb3IgZW0pIHZhbHVlcyBhbmQgYSBnaXZlbiBlbVxuICogYmFzZS4gTXVsdGlwbHkgYmFzZSB2YWx1ZXMgZm9yIG5lc3RlZCBlbSBzdHJ1Y3R1cmVzIChsYXN0IEB1c2FnZSBleGFtcGxlKS5cbiAqIEB1c2FnZTogZW0oMTBweCwgMS4xMjUpID0+IC41NTU1NmVtXG4gKiAgICAgICAgIGVtKDI0cHgsIC44NzVlbSkgPT4gMS43MTQyOWVtXG4gKiAgICAgICAgIGVtKDEycHggMCA3ZW0gcmdiYSgwLCAwLCAwLCAuNyksIDEuNzUpID0+IC40Mjg1N2VtIDAgNGVtIHJnYmEoMCwgMCwgMCwgMC43KVxuICogICAgICAgICBlbSgxMnB4KSArIGVtKDNlbSkgPT4gMy43NWVtXG4gKiAgICAgICAgIGVtKDIzcHgsIGVtKDUzcHgpKSA9PiAuNDMzOTZlbVxuICogICAgICAgICBlbSgyNHB4LCAxLjUgKiAxLjEyNSkgPT4gLjg4ODg5ZW1cbiAqL1xuXG5AZnVuY3Rpb24gZW0oJHZhbHVlcywgJGVtLWJhc2U6IDEpIHtcbiAgJGJhc2UtZm9udC1zaXplOiBwYXJzZS1pbnQoJGJhc2UtZm9udC1zaXplKTtcbiAgJGVtLWJhc2U6IHBhcnNlLWludCgkZW0tYmFzZSk7XG4gICRyZXN1bHQ6ICgpO1xuXG4gIEBlYWNoICR2YWx1ZSBpbiAkdmFsdWVzIHtcbiAgICBAaWYgJHZhbHVlID09IDAgb3IgdHlwZS1vZigkdmFsdWUpICE9IFwibnVtYmVyXCIge1xuICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsICR2YWx1ZSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkdW5pdDogdW5pdCgkdmFsdWUpO1xuICAgICAgJHZhbHVlOiBwYXJzZS1pbnQoJHZhbHVlKTtcblxuICAgICAgQGlmICR1bml0ID09IFwicHhcIiB7XG4gICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBhZGQtZW0tdW5pdCgkdmFsdWUgLyAoJGJhc2UtZm9udC1zaXplICogJGVtLWJhc2UpKSk7XG4gICAgICB9IEBlbHNlIGlmICR1bml0ID09IFwiZW1cIiB7XG4gICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBhZGQtZW0tdW5pdCgkdmFsdWUgLyAkZW0tYmFzZSkpO1xuICAgICAgfSBAZWxzZSBpZiAkdW5pdCA9PSBcIlwiIHtcbiAgICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsIGFkZC1lbS11bml0KCR2YWx1ZSAvICgkYmFzZS1mb250LXNpemUgKiAkZW0tYmFzZSkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSWYgb25seSBvbmUgdmFsdWUgaXMgcHJvdmlkZWQsIG91dHB1dCB0aGUgaW5zdGFuY2Ugb2YgdGhhdCBvYmplY3QgaW5zdGVhZFxuICAgKiBvZiB0aGUgd2hvbGUgbGlzdC4gVGhpcyBlbmFibGVzIHVzZSBjYXNlcyBsaWtlIG5lc3RlZCBmdW5jdGlvbiBpbnZvY2F0aW9uc1xuICAgKiAoZS5nLiBgZW0oMnB4LCBlbSgxNXB4KSlgKSBvciBhZGRpdGlvbnMvc3VidHJhY3Rpb25zIChlLmcuIGBlbSg1cHgpICsgZW0oMzJweClgKS5cbiAgICovXG4gIEBpZiBsZW5ndGgoJHJlc3VsdCkgPT0gMSB7XG4gICAgQHJldHVybiBudGgoJHJlc3VsdCwgMSk7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gJHJlc3VsdDtcbiAgfVxufVxuXG5cbkBmdW5jdGlvbiByZW0oJHZhbHVlcywgJGVtLWJhc2U6IDEpIHtcbiAgJGJhc2UtZm9udC1zaXplOiBwYXJzZS1pbnQoJGJhc2UtZm9udC1zaXplKTtcbiAgJGVtLWJhc2U6IHBhcnNlLWludCgkZW0tYmFzZSk7XG4gICRyZXN1bHQ6ICgpO1xuXG4gIEBlYWNoICR2YWx1ZSBpbiAkdmFsdWVzIHtcbiAgICBAaWYgJHZhbHVlID09IDAgb3IgdHlwZS1vZigkdmFsdWUpICE9IFwibnVtYmVyXCIge1xuICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsICR2YWx1ZSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkdW5pdDogdW5pdCgkdmFsdWUpO1xuICAgICAgJHZhbHVlOiBwYXJzZS1pbnQoJHZhbHVlKTtcblxuICAgICAgQGlmICR1bml0ID09IFwicHhcIiB7XG4gICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBhZGQtcmVtLXVuaXQoJHZhbHVlIC8gKCRiYXNlLWZvbnQtc2l6ZSAqICRlbS1iYXNlKSkpO1xuICAgICAgfSBAZWxzZSBpZiAkdW5pdCA9PSBcImVtXCIge1xuICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgYWRkLXJlbS11bml0KCR2YWx1ZSAvICRlbS1iYXNlKSk7XG4gICAgICB9IEBlbHNlIGlmICR1bml0ID09IFwiXCIge1xuICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgYWRkLXJlbS11bml0KCR2YWx1ZSAvICgkYmFzZS1mb250LXNpemUgKiAkZW0tYmFzZSkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSWYgb25seSBvbmUgdmFsdWUgaXMgcHJvdmlkZWQsIG91dHB1dCB0aGUgaW5zdGFuY2Ugb2YgdGhhdCBvYmplY3QgaW5zdGVhZFxuICAgKiBvZiB0aGUgd2hvbGUgbGlzdC4gVGhpcyBlbmFibGVzIHVzZSBjYXNlcyBsaWtlIG5lc3RlZCBmdW5jdGlvbiBpbnZvY2F0aW9uc1xuICAgKiAoZS5nLiBgZW0oMnB4LCBlbSgxNXB4KSlgKSBvciBhZGRpdGlvbnMvc3VidHJhY3Rpb25zIChlLmcuIGBlbSg1cHgpICsgZW0oMzJweClgKS5cbiAgICovXG4gIEBpZiBsZW5ndGgoJHJlc3VsdCkgPT0gMSB7XG4gICAgQHJldHVybiBudGgoJHJlc3VsdCwgMSk7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gJHJlc3VsdDtcbiAgfVxufVxuXG5cbiIsIi8vSW5jbHVkZSBTaGFyZWQgdmFyaWFibGVzL21peGlucy9zdHlsZXMgd2l0aCB0aGUgbWFpbiBTdHlsZXMgb2YgdGhlIHNpdGVcbkBpbXBvcnQgXCJzaGFyZWRcIjtcblxuLmJsb2NrLWV4YW1wbGV7XG4gIGJhY2tncm91bmQ6ICRncmVlbjtcbn0iXX0= */
