/*
    DENIFIRE variables
*/
@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Regular.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Regular.woff") format("woff"), url("../fonts/Roboto/Roboto-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Light.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Light.woff") format("woff"), url("../fonts/Roboto/Roboto-Light.ttf") format("truetype");
  font-weight: 100; }

@font-face {
  font-family: "Roboto";
  font-display: auto;
  src: url("../fonts/Roboto/Roboto-Bold.eot?#iefix&v=1.0") format("embedded-opentype"), url("../fonts/Roboto/Roboto-Bold.woff") format("woff"), url("../fonts/Roboto/Roboto-Bold.ttf") format("truetype");
  font-weight: 600; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Regular") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Light") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 100; }

@font-face {
  font-family: "Robotocondensed";
  font-display: auto;
  src: url("../fonts/Robotocondensed/Robotocondensed-Regular.eot?#iefix&v=Bold") format("embedded-opentype"), url("../fonts/Robotocondensed/Robotocondensed-Regular.woff") format("woff"), url("../fonts/Robotocondensed/Robotocondensed-Regular.ttf") format("truetype");
  font-weight: 600; }

/**
 * Strips the unit from a given number-unit-combination and returns the number.
 * @link: http://stackoverflow.com/a/12335841/1779999
 * @usage: parse-int(10px) => 10
 */
/**
 * Simply adds the em unit to a given number. This is used twice in the
 * function underneath, thus the need for a separate function.
 */
/**
 * Calculates em values for a given list of (px or em) values and a given em
 * base. Multiply base values for nested em structures (last @usage example).
 * @usage: em(10px, 1.125) => .55556em
 *         em(24px, .875em) => 1.71429em
 *         em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
 *         em(12px) + em(3em) => 3.75em
 *         em(23px, em(53px)) => .43396em
 *         em(24px, 1.5 * 1.125) => .88889em
 */
.block-image-link-repeater {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding: 80px 46px;
  -webkit-box-shadow: 0px 0px 14px rgba(0, 0, 0, 0.14);
          box-shadow: 0px 0px 14px rgba(0, 0, 0, 0.14);
  overflow: hidden;
  position: relative;
  margin-top: -150px;
  z-index: 99;
  background-color: #fff;
  margin-bottom: 50px; }
  @media (max-width: 1279px) {
    .block-image-link-repeater {
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
      padding: 40px 23px;
      margin-top: -50px; } }
  @media screen and (max-width: 540px) {
    .block-image-link-repeater {
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
          -ms-flex-direction: column;
              flex-direction: column;
      padding: 0 46px; } }
  .block-image-link-repeater.products {
    background-color: transparent;
    margin-top: initial;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -webkit-box-shadow: none;
            box-shadow: none;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between; }
    @media screen and (max-width: 480px) {
      .block-image-link-repeater.products {
        padding: 0; } }

.products .repeater__content {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: reverse;
      -ms-flex-direction: row-reverse;
          flex-direction: row-reverse;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  width: 23%;
  padding: 0;
  position: relative;
  padding: 0 15px;
  margin-bottom: 90px; }
  @media screen and (max-width: 979px) {
    .products .repeater__content {
      width: 48%; } }
  @media screen and (max-width: 480px) {
    .products .repeater__content {
      width: 100%; } }
  .products .repeater__content:after {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    width: 100%;
    height: 80px;
    background-color: #fff;
    z-index: 1;
    margin-top: -40px;
    -webkit-transition: all 0.15s ease-in-out;
    transition: all 0.15s ease-in-out; }
    @media screen and (max-width: 540px) {
      .products .repeater__content:after {
        -webkit-transform: none;
                transform: none; } }
  .products .repeater__content:hover::after {
    height: 162px;
    margin-top: -81px; }
  .products .repeater__content:last-of-type::after {
    display: block; }
  .products .repeater__content a {
    font-size: 13px;
    z-index: 2;
    text-align: left; }
  .products .repeater__content img {
    z-index: 2;
    margin: 0;
    max-height: 120px;
    width: auto; }

.repeater__content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  padding: 0 56px;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: relative; }
  @media (max-width: 1279px) {
    .repeater__content {
      width: 50%;
      margin-bottom: 20px; } }
  @media screen and (max-width: 540px) {
    .repeater__content {
      padding: 56px 0;
      width: 100%; } }
  .repeater__content:after {
    content: '';
    height: 60px;
    border-right: 2px solid #F1F1F1;
    position: absolute;
    top: 50%;
    margin-top: -30px;
    right: 0; }
    @media screen and (max-width: 540px) {
      .repeater__content:after {
        right: 50%;
        margin-top: initial;
        -webkit-transform: rotate(90deg);
                transform: rotate(90deg);
        top: initial;
        bottom: -30px; } }
  .repeater__content:last-of-type::after {
    display: none; }
  .repeater__content img {
    max-width: 80px;
    margin-bottom: 32px;
    min-height: 80px; }
  .repeater__content a {
    text-transform: uppercase;
    color: #000;
    text-align: center;
    font-weight: bold; }
    .repeater__content a:hover {
      text-decoration: none; }
    .repeater__content a:visited {
      color: #000; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
